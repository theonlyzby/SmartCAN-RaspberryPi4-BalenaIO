
#user  nobody;
worker_processes  1;
#multi_accept on;

error_log stderr crit;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;
	client_max_body_size 32M;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;
    access_log off;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;
	
    server {
	listen 81;
	server_tokens off;	
	server_name  PHPMyAdmin;

	#charset koi8-r;
	#access_log  logs/host.access.log  main;

	root   /var/phpmyadmin;
	index  index.php index.html index.htm;

	location / {
	   # First attempt to serve request as file, then
	   # as directory, then fall back to index.html
	   try_files $uri $uri/ /index.php /index.html;
	}


        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        location ~ \.php$ {
               fastcgi_split_path_info ^(.+\.php)(/.+)$;
                # NOTE: You should have "cgi.fix_pathinfo = 0;" in php.ini
                fastcgi_pass 127.0.0.1:9000;
                fastcgi_index index.php;
				fastcgi_param  SCRIPT_FILENAME  /var/phpmyadmin$fastcgi_script_name;
                include /usr/local/nginx/conf/fastcgi_params;
        }
	}
	## End of phpmyadmin Config
	
	lua_package_path "/usr/local/nginx/lua_libs/?.lua;;";
	
    server {
        listen 80;
	server_tokens off;	
	server_name  SmartCAN;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        root   /data/www;
        index  index.php index.html index.htm;

        location / {
           # First attempt to serve request as file, then
           # as directory, then fall back to index.html
           try_files $uri $uri/ /index.php /index.html;
        }


        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        location ~ \.php$ {
               fastcgi_split_path_info ^(.+\.php)(/.+)$;
                # NOTE: You should have "cgi.fix_pathinfo = 0;" in php.ini
                fastcgi_pass 127.0.0.1:9000;
                fastcgi_index index.php;
				fastcgi_param  SCRIPT_FILENAME  /data/www$fastcgi_script_name;
                include /usr/local/nginx/conf/fastcgi_params;
        }
	
	location /planes/ {
	    subs_filter 'src="/js/'  'src="/planes/js/';
		subs_filter 'src="..//js'  'src="/planes/js/';
		subs_filter 'src="/html/' 'src="/planes/html/';
		subs_filter 'src="/css/' 'src="/planes/css/';
		subs_filter 'href="/css' 'href="/planes/css';
		subs_filter 'src="/gifs/' 'src="/planes/gifs/' ;
		subs_filter 'src="/images/' 'src="/planes/images/' ;
		subs_filter 'url("images' 'url("/planes/images';
		proxy_pass http://127.0.0.1:90/;
		proxy_set_header Host $host;
	}
		
	location /hellolua {
		default_type 'text/plain';

		content_by_lua_block {
			local mysql = require "mysql"
			local db, err = mysql:new()
                	if not db then
                    		ngx.say("failed to instantiate mysql: ", err)
                    		return
                	end
			local ok, err, errcode, sqlstate = db:connect{
                    		host = "127.0.0.1",
                    		port = 3306,
                    		database = "domotique",
                    		user = "root",
                    		password = "SmartCAN",
                    		max_packet_size = 1024 * 1024 }

                	if not ok then
                    		ngx.say("failed to connect: ", err, ": ", errcode, " ", sqlstate)
                    		return
                	end

                	ngx.say("connected to mysql.")
				
			sqlquery = "select COUNT(*) AS County from ha_cameras_temp where `Temp_URL`='" .. ngx.var.arg_camID .. "'"
			ngx.say(sqlquery)
				
			res, err, errcode, sqlstate =
                    	db:query(sqlquery, 1)
                	if not res then
                    		ngx.say("bad result: ", err, ": ", errcode, ": ", sqlstate, ".")
                    		return
                	end
				
			county = res[1].County
			ngx.say("bad result: ", county, ": ", err, ": ", errcode, ": ", sqlstate, ".")
				
				
				
			if (res[1].County=="0") then
				ngx.say("NO URL!")
			else
				sqlquery = "select * from ha_cameras_temp where `Temp_URL`='" .. ngx.var.arg_camID .. "'"
				ngx.say(sqlquery)
				
				res, err, errcode, sqlstate =
                    			db:query(sqlquery, 1)

                  		ngx.say("result: ", res[1].Camera_URL)
			  

			end
				
			local ok, err = db:close()
                	if not ok then
                    		ngx.say("failed to close: ", err)
                    		return
                	end
				
			ngx.say('Hello,world!', ngx.var.arg_camID)
				

		}
	}

	location ~/homectrl/camera {
		set $upstream "";
		# ngx.var.camID  ngx.var.upstream = "http://127.0.0.1/smartcan/www/images/add.png"
		rewrite_by_lua '
			local mysql = require "mysql"
			local db, err = mysql:new()
			local ok, err, errcode, sqlstate = db:connect{
                    		host = "127.0.0.1",
                    		port = 3306,
                    		database = "domotique",
                    		user = "root",
                    		password = "SmartCAN",
                    		max_packet_size = 1024 * 1024 }
				
			local sql = "select COUNT(*) AS County from ha_cameras_temp where `Temp_URL`=\'" .. ngx.var.arg_camID .. "\'"
			res, err, errcode, sqlstate = db:query(sql, 1)
				
			if res[1].County=="0" then 
				ngx.var.upstream = "http://127.0.0.1/smartcan/www/images/no-camera.png"
			else 
				local sql = "select * from ha_cameras_temp where `Temp_URL`=\'" .. ngx.var.arg_camID .. "\'"
				res, err, errcode, sqlstate = db:query(sql, 1)
                  		ngx.var.upstream = res[1].Camera_URL
				  
				local length=string.len(res[1].Authentication)
				if (length>=1) then
					local auth = " Basic " .. res[1].Authentication
					ngx.req.set_header("Authorization" ,  auth)
				end
			end
				
			local ok, err = db:close()	
		';
			
		proxy_buffering             off;
		proxy_connect_timeout       10;
		proxy_send_timeout          30;
		proxy_read_timeout          30;
		proxy_pass                  $upstream;
	}

	location /cam {
		proxy_buffering             off;
		proxy_set_header            Host $host;
		proxy_set_header            X-Real-IP  $remote_addr;
		proxy_set_header            X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_redirect              off;
		proxy_send_timeout          30;
		proxy_read_timeout          30;
		proxy_connect_timeout       2;
		proxy_max_temp_file_size 0;
		proxy_buffers 8 32k;
		proxy_pass http://127.0.0.1/favicon.png;
	}



	# PUSH CONFIG

	location /smartcan {
		# nchan_channel_group pushmodule_cheetah;
		location /smartcan/envoi {
			nchan_channel_id smartcan;
			nchan_publisher;
			nchan_store_messages off; 
			push_message_timeout 5s;        # Give the clients time
			nchan_message_buffer_length 10;  # to catch up
		}
		location /smartcan/reception {
			nchan_channel_id smartcan;
			nchan_subscriber;
			default_type text/plain; 
			send_timeout 3600;
		}
	}

	#error_page  404              /404.html;

	# redirect server error pages to the static page /50x.html
	#
	error_page   500 502 503 504  /50x.html;
	location = /50x.html {
		root   html;
	}

	# deny access to .htaccess files, if Apache's document root
	# concurs with nginx's one
	#
	#location ~ /\.ht {
	#    deny  all;
	#}
    }

}
